import networkx as nx
import matplotlib.pyplot as plt

def minimum_spanning_tree(nodes):
    marks = [[1, 999] for _ in range(len(nodes))]
    tree = []
    for i in range(len(nodes)):
        tree.append(minIndex(marks))
        for connection in nodes[tree[i]][1]:
            if marks[connection[0]][1] > connection[1]:
                marks[connection[0]] = [i, connection[1]]
    return tree
        
def minIndex(nodes):
    min = nodes[0][1]
    index = 0
    for i, j in enum(nodes):
        if j[1]<min:
            min = j[1]
            index = i
    return index

def matrixMultiplication(A, B):
    result = [[0]*len(A) for i in range(len(B[0]))]
    for row in range(len(A)):
        for column in range(len(A)):
            for i in range(len(B)):
                result[row][column]+=A[row][i]*B[i][column]
    return result

def xorMatrix(A, B):
    for i in range(len(A)):
        for j in range(len(A[0])):
            if A[i][j] > 0 or B[i][j] > 0:
                A[i][j] = 1
            else:
                A[i][j] = 0
    return A
    
def andMatrix(A):
    for i in range(len(A)):
        for j in range(len(A[0])):
            if A[i][j] > 0 and A[j][i] > 0:
                A[i][j] = 1
                A[j][i] = 1
            else:
                A[i][j] = 0
                A[j][i] = 0
    return A

def getStraitMatrix(matrix):
    prevMatrix = matrix
    resMatrix = matrix
    for i in range(len(matrix)):
        prevMatrix = matrixMultiplication(prevMatrix, matrix)
        resMatrix = xorMatrix(resMatrix, prevMatrix)
    for i in range(len(resMatrix)):
        resMatrix[i][i]=1
    print("матрица достижимости")
    for i in resMatrix:
        print(i)
    return andMatrix(resMatrix)

G = nx.Graph()

for i in range(int(input("Введите количество узлов "))-1):
    for j in input("C какими вершинами соединена вершина " + str(i+1) + " ").split(" "):
        end_weigth = j.split(",")
        G.add_edge(i+1, int(end_weigth[0]), weight = int(end_weigth[1]))

G = nx.minimum_spanning_tree(G)

plt.title("Остов")
nx.draw_circular(G, with_labels=True, node_size = 200, node_color = 'purple', font_color = 'white')
plt.show()